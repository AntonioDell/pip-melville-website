name: cd-pipeline
on:
  push:
    # Pattern matched against refs/tags
    tags:        
      - '**'
jobs:
  export-game:
    runs-on: ubuntu-latest
    name: Export Game
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: set WEB_BUCKET_URL in index.html
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "$WEB_BUCKET_URL"
          replace: "${{ secrets.PMW_WEB_BUCKET_URL }}"
          include: "**custom_shell.html"
          regex: false
      - name: set DATA_BUCKET_URL in index.html
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "$DATA_BUCKET_URL"
          replace: "${{ secrets.PMW_DATA_BUCKET_URL }}"
          include: "**custom_shell.html"
          regex: false
      - name: get tag from version
        id: tag_version
        run: |
          echo ::set-output name=TAG_VERSION::${GITHUB_REF#refs/tags/v}
      - name: export game
        id: export
        # Use latest version (see releases for all versions)
        uses: AntonioDell/godot-export@master
        with:
          # Defining all the required inputs
          godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/4.0/beta1/Godot_v4.0-beta1_linux.x86_64.zip
          godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/4.0/beta1/Godot_v4.0-beta1_export_templates.tpz
          relative_project_path: ./
          archive_output: true
          use_godot_4: true
      - name: create release
        uses: softprops/action-gh-release@v0.1.14
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          tag_name: ${{ steps.tag_version.outputs.TAG_VERSION }}
          files: ${{ steps.export.outputs.archive_directory }}/*
      - name: unzip archive
        run: |
          unzip ${{ steps.export.outputs.archive_directory }}/Web.zip -d web
      - name: set up s3cmd cli tool
        uses: s3-actions/s3cmd@v1.2.0
        with:
          provider: aws
          region: 'eu-central-1'
          access_key: ${{ secrets.PMW_S3_ACCESS_KEY }}
          secret_key: ${{ secrets.PMW_S3_SECRET_KEY }}
      - name: delete contents of website bucket
        run: s3cmd del -r --force ${{ secrets.PMW_WEB_S3CMD_URI }}/
      - name: upload website files
        run: s3cmd sync --recursive web/* ${{ secrets.PMW_WEB_BUCKET_URL }}/
      - name: replace remote website bucket
        run: |
      - name: replace remote static folder
        run: |
          s3cmd sync --recursive --acl-public ${{ github.workspace }}/static ${{ secrets.PMW_WEB_S3CMD_URI }}/
          s3cmd cp --add-header=Content-Type:image/svg+xml ${{ secrets.PMW_WEB_S3CMD_URI }}/static/pattern.svg ${{ secrets.PMW_WEB_S3CMD_URI }}/static/pattern.svg
          s3cmd cp --add-header=Content-Type:text/html ${{ secrets.PMW_WEB_S3CMD_URI }}/static/404.html ${{ secrets.PMW_WEB_S3CMD_URI }}/static/404.html


